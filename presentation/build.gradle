plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'kotlin-kapt'
   }

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.ceibaparqueadero"
        minSdk 26
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
jacoco {
    toolVersion = "0.8.7"
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation project(path: ':domain')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

   // Declaracion de dependecias Room
    implementation "androidx.room:room-ktx:2.4.2"
    kapt "androidx.room:room-compiler:2.4.2"

}
// tarea para los reportes de analisis de codigo
task jacocoTestReport (type: JacocoReport, dependsOn: [':domain :taskTest',':application :taskTest',':infrastructure:taskTest',':presentation:taskTest']){

    def moduleDomain = project(':domain')
    def moduleApplication = project(':application')
    def moduleInfrastructure = project(':infrastructure')
    def modulePresentation = project(':presentation')

    def directoriesToCoverage = layout.files("$buildDir/tmp/kotlin-classes/debug",
            "$moduleDomain.buildDir/tmp/kotlin-classes/debug",
            "$modulePresentation.buildDir/tmp/kotlin-classes/debug",
            "$moduleApplication.buildDir/tmp/kotlin-classes/debug",
            "$moduleInfrastructure.buildDir/tmp/kotlin-classes/debug"
    )

    def mainSources = layout.files("$project.projectDir/src/main/java",
            "$moduleDomain.projectDir/src/main/java",
            "$modulePresentation.projectDir/src/main/java",
            "$moduleApplication.projectDir/src/main/java",
            "$moduleInfrastructure.projectDir/src/main/java",
    )

    def executionFilesFromConnectedAndroidTest = fileTree(
            dir: "$buildDir", includes:
                    ["outputs/code_coverage/debugAndroidTest/connected/**coverage.ec"]
    )

    def executionFileForUnitTestInModule = "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    //def executionFileForUnitTestInOtherModule =
            "$moduleDomain.buildDir/jacoco/testDebugUnitTest.exec"
            "$modulePresentation.buildDir/jacoco/testDebugUnitTest.exec"
            "$moduleApplication.buildDir/jacoco/testDebugUnitTest.exec"
            "$moduleInfrastructure.buildDir/jacoco/testDebugUnitTest.exec"

    def executionFiles = layout.files(
            executionFilesFromConnectedAndroidTest,
            executionFileForUnitTestInModule
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([directoriesToCoverage.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }

}